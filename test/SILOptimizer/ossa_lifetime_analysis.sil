// RUN: %target-sil-opt %s -ossa-lifetime-analysis -o /dev/null | %FileCheck %s
//
// These tests rely on "incomplete" OSSA lifetimes. Incomplete OSSA
// lifetimes are invalid SIL, but the OSSA liveness utilities still
// need to handle them! SILGen and textual SIL is allowed to produce
// incomplete lifetimes. The OSSA liveness utilities need to be able
// to fixup those incomplete lifetimes. So the utilities need to
// handle invalid SIL in order to produce valid SIL.
//
// For each function, all values used by debug_value [trace] are
// considered live range defs. Liveness is computed from their direct uses.

sil_stage canonical

import Builtin

enum FakeOptional<T> {
case none
case some(T)
}

class C {}
class D {
  var object: C
  @_borrowed @_hasStorage var borrowed: C { get set }
}

// CHECK-LABEL: @testSelfLoop
// CHECK: SSA lifetime analysis:   [[V:%.*]] = copy_value %0 : $C
// CHECK: bb1: LiveOut
// CHECK: bb2: LiveWithin
// CHECK: lifetime-ending user:   br bb1([[V]] : $C)
// CHECK: last user:   br bb1([[V]] : $C)
// CHECK-NOT: dead def
sil [ossa] @testSelfLoop : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  br bb3

bb1(%1 : @owned $C):
  destroy_value %1 : $C
  %2 = copy_value %0 : $C
  debug_value [trace] %2 : $C
  br bb2

bb2:
  br bb1(%2 : $C)

bb3:
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: @testSelfKill
// CHECK:SSA lifetime analysis:   [[V:%.*]] = move_value %1 : $C
// CHECK: bb1: LiveOut
// CHECK: bb2: LiveWithin
// CHECK: lifetime-ending user:   br bb1([[V]] : $C)
// CHECK: last user:   br bb1([[V]] : $C)
// CHECK-NOT: dead def
sil [ossa] @testSelfKill : $@convention(thin) () -> () {
bb0:
  br bb3

bb1(%1 : @owned $C):
  %2 = move_value %1 : $C
  debug_value [trace] %2 : $C
  br bb2

bb2:
  br bb1(%2 : $C)

bb3:
  %99 = tuple()
  return %99 : $()
}

// Test a live range that is extended through reborrows,
// considering them new defs.
// (e.g. BorrowedValue::visitTransitiveLifetimeEndingUses)
//
// This live range is not dominated by the original borrow.
//
// CHECK-LABEL: @testReborrow
// CHECK: MultiDef lifetime analysis:
// CHECK:   def:   [[B:%.*]] = begin_borrow %0 : $C
// CHECK:   def:   [[RB:%.*]] = argument of bb3 : $C
// CHECK-NEXT: bb2: LiveWithin
// CHECK-NEXT: bb3: LiveWithin
// CHECK-NEXT: lifetime-ending user:   br bb3([[B]] : $C)
// CHECK-NEXT: lifetime-ending user:   end_borrow [[RB]] : $C
// CHECK-NEXT: last user:   br bb3([[B]] : $C)
// CHECK-NEXT: last user:   end_borrow [[RB]] : $C
sil [ossa] @testReborrow : $@convention(thin) (@owned C) -> () {
bb0(%0 : @owned $C):
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $C
  br bb3(%borrow1 : $C)

bb2:
  %borrow2 = begin_borrow %0 : $C
  debug_value [trace] %borrow2 : $C
  br bb3(%borrow2 : $C)

bb3(%reborrow : @guaranteed $C):
  debug_value [trace] %reborrow : $C
  end_borrow %reborrow : $C
  br bb4

bb4:
  destroy_value %0 : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: @testGuaranteedForwarding
// CHECK: SSA lifetime analysis:   [[C:%.*]] = unchecked_ref_cast %{{.*}} : $D to $C
// CHECK: bb0: LiveWithin
// CHECK: regular user: %{{.*}} = load [copy]
// CHECK: last user:    %{{.*}} = load [copy]
sil [ossa] @testGuaranteedForwarding : $@convention(thin) (@owned D) -> () {
bb0(%0 : @owned $D):
  %borrow0 = begin_borrow %0 : $D
  %c = unchecked_ref_cast %borrow0 : $D to $C
  debug_value [trace] %c : $C
  %d = unchecked_ref_cast %c : $C to $D
  %f = ref_element_addr %d : $D, #D.object
  %o = load [copy] %f : $*C
  end_borrow %borrow0 : $D
  destroy_value %o : $C
  destroy_value %0 : $D
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: @testGuaranteedResult
// CHECK: SSA lifetime analysis: %0 = argument of bb0 : $D
// CHECK: bb0: LiveWithin
// CHECK: last user:   end_apply
sil [ossa] @testGuaranteedResult : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  debug_value [trace] %0 : $D
  %2 = class_method %0 : $D, #D.borrowed!read : (D) -> () -> (), $@yield_once @convention(method) (@guaranteed D) -> @yields @guaranteed C
  (%3, %4) = begin_apply %2(%0) : $@yield_once @convention(method) (@guaranteed D) -> @yields @guaranteed C
  end_apply %4
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: @testScopedAddress
// CHECK: SSA lifetime analysis: %{{.*}} = ref_element_addr %0
// CHECK: bb0: LiveWithin
// CHECK: last user: end_access
sil [ossa] @testScopedAddress : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  %f = ref_element_addr %0 : $D, #D.object
  debug_value [trace] %f : $*C
  %access = begin_access [read] [static] %f : $*C
  %o = load [copy] %access : $*C
  end_access %access : $*C
  destroy_value %o : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: @testDeadAddress
// CHECK: SSA lifetime analysis: %0 = argument of bb0 : $D
// CHECK: bb0: LiveWithin
// CHECK: last user: %{{.*}} = ref_element_addr
sil [ossa] @testDeadAddress : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  debug_value [trace] %0 : $D
  %f = ref_element_addr %0 : $D, #D.object
  %99 = tuple()
  return %99 : $()
}

// A LiveOut block with a non-SSA def, bb0, has no liveness boundary.
//
// CHECK-LABEL: @testMultiDefLiveOutNoBoundary
// CHECK: MultiDef lifetime analysis:
// CHECK:   def: [[CP0:%.*]] = copy_value %0 : $C
// CHECK:   def: %{{.*}} = copy_value %0 : $C
// CHECK:   def: %{{.*}} = move_value [[CP0]] : $C
// CHECK:   def: %{{.*}} = argument of bb4 : $C
// CHECK: bb0: LiveOut,
// CHECK: bb2: LiveWithin,
// CHECK: bb3: LiveWithin,
// CHECK: bb4: LiveWithin,
// CHECK: bb1: LiveWithin,
// CHECK: last user:   br bb4
// CHECK-NEXT: last user:   br bb4
// CHECK-NEXT: last user:   %{{.*}} = move_value [[CP0]] : $C
// CHECK-NEXT: last user:   destroy_value %{{.*}} : $C
// CHECK-NEXT: last user:   destroy_value [[CP0]] : $C
sil [ossa] @testMultiDefLiveOutNoBoundary : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %copy0 = copy_value %0 : $C
  debug_value [trace] %copy0 : $C
  cond_br undef, bb1, bb3

bb1:
  destroy_value %copy0 : $C
  br bb2

bb2:
  %copy2 = copy_value %0 : $C
  debug_value [trace] %copy2 : $C
  br bb4(%copy2 : $C)

bb3:
  %copy3 = move_value %copy0 : $C
  debug_value [trace] %copy3 : $C
  br bb4(%copy3 : $C)

bb4(%phi : @owned $C):
  debug_value [trace] %phi : $C
  destroy_value %phi : $C
  %99 = tuple()
  return %99 : $()
}

// A dead-end block with a def can still be a boundary edge. This can
// only happen in OSSA with incomplete lifetimes.
//
// CHECK-LABEL: @testMultiDefDeadDefBoundaryEdge
// CHECK: MultiDef lifetime analysis:
// CHECK:   def: [[CP0:%.*]] = copy_value %0 : $C
// CHECK:   def: [[CP3:%.*]] = copy_value %0 : $C
// CHECK: bb0: LiveOut,
// CHECK: bb1: LiveWithin,
// CHECK: bb2: LiveWithin,
// CHECK: last user:   destroy_value [[CP0]] : $C
// CHECK-NEXT: boundary edge: bb1
// CHECK-NEXT: dead def: [[CP3]] = copy_value %0 : $C
sil [ossa] @testMultiDefDeadDefBoundaryEdge : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %copy0 = copy_value %0 : $C
  debug_value [trace] %copy0 : $C
  cond_br undef, bb1, bb3

bb1:
  %dead = copy_value %0 : $C
  debug_value [trace] %dead : $C
  unreachable

bb3:
  destroy_value %copy0 : $C
  %99 = tuple()
  return %99 : $()
}
