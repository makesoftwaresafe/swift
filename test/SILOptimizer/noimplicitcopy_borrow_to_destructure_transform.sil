// RUN: %target-sil-opt -enable-experimental-move-only -enable-experimental-feature MoveOnlyClasses -enable-sil-verify-all -sil-move-only-borrow-to-destructure %s | %FileCheck %s

sil_stage raw

import Builtin

//////////////////
// Declarations //
//////////////////

enum FakeOptional<T> {
case some(T)
case none
}

class Klass {
  var k: FakeOptional<Klass> { get }
}

sil @use_klass_without_escaping : $@convention(thin) (@guaranteed Klass) -> ()

struct Trivial {
    var value: Builtin.Int32
}

sil @use_trivial_without_escaping : $@convention(thin) (Trivial) -> ()

struct AggStruct {
  var lhs: Klass
  var rhs: Klass
}

///////////
// Tests //
///////////

// CHECK-LABEL: sil [ossa] @trivial_multiple_non_consuming_use : $@convention(thin) (Trivial) -> () {
// CHECK: bb0([[ARG:%.*]] :
// CHECK:   [[ARG_WRAPPED:%.*]] = copyable_to_moveonlywrapper [owned] [[ARG]]
// CHECK:   [[MOVED_ARG_WRAPPED:%.*]] = move_value [lexical] [[ARG_WRAPPED]]
// CHECK:   [[MARKED:%.*]] = mark_must_check [no_implicit_copy] [[MOVED_ARG_WRAPPED]]
// CHECK:   [[MARKED_COPY:%.*]] = copy_value [[MARKED]]
// CHECK:   [[BORROW_MARKED_COPY:%.*]] = begin_borrow [[MARKED_COPY]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[BORROW_MARKED_COPY]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROW_MARKED_COPY]]
// CHECK:   [[BORROW_MARKED_COPY:%.*]] = begin_borrow [[MARKED_COPY]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[BORROW_MARKED_COPY]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROW_MARKED_COPY]]
// CHECK:   destroy_value [[MARKED_COPY]]
// CHECK:   destroy_value [[MARKED]]
// CHECK: } // end sil function 'trivial_multiple_non_consuming_use'
sil [ossa] @trivial_multiple_non_consuming_use : $@convention(thin) (Trivial) -> () {
bb0(%0 : $Trivial):
  debug_value %0 : $Trivial, let, name "x", argno 1
  %2 = copyable_to_moveonlywrapper [owned] %0 : $Trivial
  %3 = move_value [lexical] %2 : $@moveOnly Trivial
  %4 = mark_must_check [no_implicit_copy] %3 : $@moveOnly Trivial
  debug_value %4 : $@moveOnly Trivial, let, name "x2"
  %6 = begin_borrow %4 : $@moveOnly Trivial
  %7 = function_ref @use_trivial_without_escaping : $@convention(thin) (Trivial) -> ()
  %8 = moveonlywrapper_to_copyable [guaranteed] %6 : $@moveOnly Trivial
  %9 = apply %7(%8) : $@convention(thin) (Trivial) -> ()
  end_borrow %6 : $@moveOnly Trivial
  %11 = begin_borrow %4 : $@moveOnly Trivial
  %12 = function_ref @use_trivial_without_escaping : $@convention(thin) (Trivial) -> ()
  %13 = moveonlywrapper_to_copyable [guaranteed] %11 : $@moveOnly Trivial
  %14 = apply %12(%13) : $@convention(thin) (Trivial) -> ()
  end_borrow %11 : $@moveOnly Trivial
  destroy_value %4 : $@moveOnly Trivial
  %38 = tuple ()
  return %38 : $()
}

// CHECK-LABEL: sil [ossa] @trivial_multiple_non_consuming_use_return_trivial : $@convention(thin) (Trivial) -> Trivial {
// CHECK: bb0([[ARG:%.*]] :
// CHECK:   [[ARG_WRAPPED:%.*]] = copyable_to_moveonlywrapper [owned] [[ARG]]
// CHECK:   [[MOVED_ARG_WRAPPED:%.*]] = move_value [lexical] [[ARG_WRAPPED]]
// CHECK:   [[MARKED:%.*]] = mark_must_check [no_implicit_copy] [[MOVED_ARG_WRAPPED]]
// CHECK:   [[MARKED_COPY:%.*]] = copy_value [[MARKED]]
// CHECK:   [[BORROW_MARKED_COPY:%.*]] = begin_borrow [[MARKED_COPY]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[BORROW_MARKED_COPY]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROW_MARKED_COPY]]
// CHECK:   [[BORROW_MARKED_COPY:%.*]] = begin_borrow [[MARKED_COPY]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[BORROW_MARKED_COPY]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROW_MARKED_COPY]]
// CHECK:   destroy_value [[MARKED_COPY]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [owned] [[MARKED]]
// CHECK:   return [[UNWRAPPED]]
// CHECK: } // end sil function 'trivial_multiple_non_consuming_use_return_trivial'
sil [ossa] @trivial_multiple_non_consuming_use_return_trivial : $@convention(thin) (Trivial) -> Trivial {
bb0(%0 : $Trivial):
  debug_value %0 : $Trivial, let, name "x", argno 1
  %2 = copyable_to_moveonlywrapper [owned] %0 : $Trivial
  %3 = move_value [lexical] %2 : $@moveOnly Trivial
  %4 = mark_must_check [no_implicit_copy] %3 : $@moveOnly Trivial
  debug_value %4 : $@moveOnly Trivial, let, name "x2"
  %6 = begin_borrow %4 : $@moveOnly Trivial
  %7 = function_ref @use_trivial_without_escaping : $@convention(thin) (Trivial) -> ()
  %8 = moveonlywrapper_to_copyable [guaranteed] %6 : $@moveOnly Trivial
  %9 = apply %7(%8) : $@convention(thin) (Trivial) -> ()
  end_borrow %6 : $@moveOnly Trivial
  %11 = begin_borrow %4 : $@moveOnly Trivial
  %12 = function_ref @use_trivial_without_escaping : $@convention(thin) (Trivial) -> ()
  %13 = moveonlywrapper_to_copyable [guaranteed] %11 : $@moveOnly Trivial
  %14 = apply %12(%13) : $@convention(thin) (Trivial) -> ()
  end_borrow %11 : $@moveOnly Trivial
  %15 = moveonlywrapper_to_copyable [owned] %4 : $@moveOnly Trivial
  return %15 : $Trivial
}

// CHECK-LABEL: sil [ossa] @agg_struct_access_field : $@convention(thin) (@guaranteed AggStruct) -> () {
// CHECK: bb0([[ARG:%.*]] :
// CHECK:   [[BORROW:%.*]] = begin_borrow [lexical] [[ARG]]
// CHECK:   [[COPY:%.*]] = copy_value [[BORROW]]
// CHECK:   [[WRAPPED:%.*]] = copyable_to_moveonlywrapper [owned] [[COPY]]
// CHECK:   [[MARKED:%.*]] = mark_must_check [no_implicit_copy] [[WRAPPED]]
// CHECK:   [[COPY_MARKED:%.*]] = copy_value [[MARKED]]
// CHECK:   [[BORROWED_COPY_MARKED:%.*]] = begin_borrow [[COPY_MARKED]]
// CHECK:   [[EXT_BORROWED_COPY_MARKED:%.*]] = struct_extract [[BORROWED_COPY_MARKED]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[EXT_BORROWED_COPY_MARKED]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROWED_COPY_MARKED]]
// CHECK:   [[BORROWED_COPY_MARKED:%.*]] = begin_borrow [[COPY_MARKED]]
// CHECK:   [[EXT_BORROWED_COPY_MARKED:%.*]] = struct_extract [[BORROWED_COPY_MARKED]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[EXT_BORROWED_COPY_MARKED]]
// CHECK:   apply {{%.*}}([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROWED_COPY_MARKED]]
// CHECK:   destroy_value [[COPY_MARKED]]
// CHECK:   destroy_value [[MARKED]]
// CHECK: } // end sil function 'agg_struct_access_field'
sil [ossa] @agg_struct_access_field : $@convention(thin) (@guaranteed AggStruct) -> () {
bb0(%0 : @guaranteed $AggStruct):
  debug_value %0 : $AggStruct, let, name "x", argno 1
  %3 = begin_borrow [lexical] %0 : $AggStruct
  %4 = copy_value %3 : $AggStruct
  %5 = copyable_to_moveonlywrapper [owned] %4 : $AggStruct
  %6 = mark_must_check [no_implicit_copy] %5 : $@moveOnly AggStruct
  debug_value %6 : $@moveOnly AggStruct, let, name "x2"
  %8 = begin_borrow %6 : $@moveOnly AggStruct
  %9 = struct_extract %8 : $@moveOnly AggStruct, #AggStruct.lhs
  %10 = copy_value %9 : $@moveOnly Klass
  %11 = function_ref @use_klass_without_escaping : $@convention(thin) (@guaranteed Klass) -> ()
  %12 = begin_borrow %10 : $@moveOnly Klass
  %13 = moveonlywrapper_to_copyable [guaranteed] %12 : $@moveOnly Klass
  %14 = apply %11(%13) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %12 : $@moveOnly Klass
  destroy_value %10 : $@moveOnly Klass
  end_borrow %8 : $@moveOnly AggStruct
  %55 = begin_borrow %6 : $@moveOnly AggStruct
  %56 = struct_extract %55 : $@moveOnly AggStruct, #AggStruct.lhs
  %57 = copy_value %56 : $@moveOnly Klass
  %58 = function_ref @use_klass_without_escaping : $@convention(thin) (@guaranteed Klass) -> ()
  %59 = begin_borrow %57 : $@moveOnly Klass
  %60 = moveonlywrapper_to_copyable [guaranteed] %59 : $@moveOnly Klass
  %61 = apply %58(%60) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %59 : $@moveOnly Klass
  destroy_value %57 : $@moveOnly Klass
  end_borrow %55 : $@moveOnly AggStruct
  destroy_value %6 : $@moveOnly AggStruct
  end_borrow %3 : $AggStruct
  %70 = tuple ()
  return %70 : $()
}

// This test makes sure we handle things like class_method correctly which are
// uses that can take a wrapped type without pushing the wrapped type through a
// moveonlywrapper_to_copyable.
//
// CHECK-LABEL: sil [ossa] @test_access_class_field : $@convention(thin) (@guaranteed Klass) -> () {
// CHECK: bb0(
// CHECK:   [[WRAPPED:%.*]] = copyable_to_moveonlywrapper [owned]
// CHECK:   [[MARK:%.*]] = mark_must_check [no_implicit_copy] [[WRAPPED]]
// CHECK:   [[COPY_MARK:%.*]] = copy_value [[MARK]]
// CHECK:   [[METHOD:%.*]] = class_method [[COPY_MARK]]
// CHECK:   [[BORROW:%.*]] = begin_borrow [[COPY_MARK]]
// CHECK:   [[UNWRAPPED:%.*]] = moveonlywrapper_to_copyable [guaranteed] [[BORROW]]
// CHECK:   apply [[METHOD]]([[UNWRAPPED]])
// CHECK:   end_borrow [[BORROW]]
// CHECK: } // end sil function 'test_access_class_field'
sil [ossa] @test_access_class_field : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  debug_value %0 : $Klass, let, name "x", argno 1
  %2 = copy_value %0 : $Klass
  %3 = begin_borrow [lexical] %2 : $Klass
  %4 = copy_value %3 : $Klass
  %5 = copyable_to_moveonlywrapper [owned] %4 : $Klass
  %6 = mark_must_check [no_implicit_copy] %5 : $@moveOnly Klass
  debug_value %6 : $@moveOnly Klass, let, name "x2"
  %8 = begin_borrow %6 : $@moveOnly Klass
  %9 = class_method %8 : $@moveOnly Klass, #Klass.k!getter : (Klass) -> () -> FakeOptional<Klass>, $@convention(method) (@guaranteed Klass) -> @owned FakeOptional<Klass>
  %10 = moveonlywrapper_to_copyable [guaranteed] %8 : $@moveOnly Klass
  %11 = apply %9(%10) : $@convention(method) (@guaranteed Klass) -> @owned FakeOptional<Klass>
  switch_enum %11 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb2, case #FakeOptional.none!enumelt: bb1

bb1:
  unreachable

bb2(%22 : @owned $Klass):
  %23 = function_ref @use_klass_without_escaping : $@convention(thin) (@guaranteed Klass) -> ()
  %24 = apply %23(%22) : $@convention(thin) (@guaranteed Klass) -> ()
  destroy_value %22 : $Klass
  end_borrow %8 : $@moveOnly Klass
  br bb3

bb3:
  cond_br undef, bb4, bb7

bb4:
  %64 = begin_borrow %6 : $@moveOnly Klass
  %65 = class_method %64 : $@moveOnly Klass, #Klass.k!getter : (Klass) -> () -> FakeOptional<Klass>, $@convention(method) (@guaranteed Klass) -> @owned FakeOptional<Klass>
  %66 = moveonlywrapper_to_copyable [guaranteed] %64 : $@moveOnly Klass
  %67 = apply %65(%66) : $@convention(method) (@guaranteed Klass) -> @owned FakeOptional<Klass>
  switch_enum %67 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb6, case #FakeOptional.none!enumelt: bb5

bb5:
  unreachable


bb6(%78 : @owned $Klass):
  %79 = function_ref @use_klass_without_escaping : $@convention(thin) (@guaranteed Klass) -> ()
  %80 = apply %79(%78) : $@convention(thin) (@guaranteed Klass) -> ()
  destroy_value %78 : $Klass
  end_borrow %64 : $@moveOnly Klass
  br bb3

bb7:
  destroy_value %6 : $@moveOnly Klass
  end_borrow %3 : $Klass
  destroy_value %2 : $Klass
  %88 = tuple ()
  return %88 : $()
}
