// RUN: %target-sil-opt -enable-experimental-feature VariadicGenerics -enable-sil-verify-all=true %s | %target-sil-opt -enable-experimental-feature VariadicGenerics -enable-sil-verify-all=true | %FileCheck %s

import Builtin
import Swift

// CHECK-LABEL: sil @test1 :
// CHECK: [[INDEX:%.*]] = dynamic_pack_index {{%.*}} of $Pack{repeat each T}
// CHECK: {{%.*}} = open_pack_element [[INDEX]] of <U...> at <Pack{repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000000"
sil @test1 : $<T...> () -> () {
bb0:
  %intIndex = integer_literal $Builtin.Word, 0
  %index = dynamic_pack_index %intIndex of $Pack{repeat each T}
  %0 = open_pack_element %index of <U...> at <Pack{repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000000"
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: sil @test2 :
// CHECK: [[INDEX:%.*]] = scalar_pack_index 0 of $Pack{Int, repeat each T}
// CHECK: {{%.*}} = open_pack_element [[INDEX]] of <U...> at <Pack{Int, repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000001"
sil @test2 : $<T...> () -> () {
bb0:
  %index = scalar_pack_index 0 of $Pack{Int, repeat each T}
  %0 = open_pack_element %index of <U...> at <Pack{Int, repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000001"
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: sil @test3 :
// CHECK: [[INNER_INDEX:%.*]] = dynamic_pack_index {{%.*}} of $Pack{repeat each T}
// CHECK: [[INDEX:%.*]] = pack_pack_index 1, [[INNER_INDEX]] of $Pack{Int, repeat each T}
// CHECK: {{%.*}} = open_pack_element [[INDEX]] of <U...> at <Pack{Int, repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000002"
// CHECK: metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000002") U).Type
sil @test3 : $<T...> () -> () {
bb0:
  %intIndex = integer_literal $Builtin.Word, 0
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T}
  %index = pack_pack_index 1, %innerIndex of $Pack{Int, repeat each T}
  %0 = open_pack_element %index of <U...> at <Pack{Int, repeat each T}>, shape $U, uuid "01234567-89AB-CDEF-0123-000000000002"
  %metatype = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000002") U).Type
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: sil @test4 :
// CHECK: [[PACK1:%.*]] = alloc_pack $Pack{Int, repeat each T}
// CHECK: [[PACK2:%.*]] = alloc_pack $Pack{repeat each T, repeat Optional<each T>}
// CHECK: dealloc_pack [[PACK2]] : $*Pack{repeat each T, repeat Optional<each T>}
// CHECK: dealloc_pack [[PACK1]] : $*Pack{Int, repeat each T}
sil @test4 : $<T...> () -> () {
bb0:
  %pack1 = alloc_pack $Pack{Int, repeat each T}
  %pack2 = alloc_pack $Pack{repeat each T, repeat Optional<each T>}
  dealloc_pack %pack2 : $*Pack{repeat each T, repeat Optional<each T>}
  dealloc_pack %pack1 : $*Pack{Int, repeat each T}
  %ret = tuple ()
  return %ret : $()
}
